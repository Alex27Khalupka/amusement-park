@startuml
Симуляция ..> Симуляция_парка_развлечений: <<create>>
Симуляция_парка_развлечений .up.> Управление_паркомImpl: <<create>>
Симуляция_парка_развлечений .left.> Управление_посетителямиImpl: <<create>>
Симуляция_парка_развлечений ..> Управление_аттракционамиImpl: <<create>>
Симуляция_парка_развлечений ..> Управление_продажами_билетовImpl: <<create>>
Симуляция_парка_развлечений .right.> Управление_продажами_аттракционовImpl: <<create>>
Симуляция_парка_развлечений ..> Управление_Главной_АллеейImpl: <<create>>
Симуляция_парка_развлечений .up.> Управление_использованием_аттракционаImpl: <<create>>

class Симуляция << (M,Maroon) Main >> {
+ старт: void
}

class Симуляция_парка_развлечений << (I,Indigo) Injector >> {
+ инициализация(): void
+ создать_UI(): void
+ создать_управление_парком(): void
+ создать_управление_посетителями(): void
+ создать_управление_аттракционами(): void
+ создать_управление_продажами_билетов(): void
+ создать_управление_продажами_аттракционов(): void
+ создать_управление_главной_аллеей(): void
+ создать_Управление_использованием_аттракциона(): void
}

class Управление_посетителямиImpl << (I,MidnightBlue) >> {
    + добавить_посетителя(id, int): void
    + удалить_посетителя(id): bool
    + удалить_посетителя_из_парка(id): bool
    + переместить_посетителя(id, string): void
    - просмотр_списка_посетителей(id, int): list

}

class Управление_паркомImpl << (I,MidnightBlue) >> {
    + бюджет_парка(int): int
    + редактировать_посетителей(Управление_посетителями): void
    + редактировать_аттракционы(Управление_аттракционами): Управление_аттракционами

}

class Управление_аттракционамиImpl << (I,MidnightBlue) >> {
    + приобрести_аттракцион(Управление_продажами_аттракционов): void
    + удалить_аттракцион(name): bool
    + просмотр_аттракциона(Управление_использованием_аттракциона): void
    + просмотр_списка_аттракционов(string): list

}

class Управление_Главной_АллеейImpl << (I,MidnightBlue) >> {
    + приобрести_аттракцион(Управление_продажами_аттракционов): void
    + удалить_аттракцион(name): bool
    + просмотр_посетителей_на_аллее(id, int): list
    + вернуться_к_выбору_объекта(Управление_парком): void

}

class Управление_продажами_билетовImpl << (I,MidnightBlue) >> {
    - стоимость_билета(int): int
    + приобрести_билет(int, int): void
}


class Управление_продажами_аттракционовImpl << (I,MidnightBlue) >> {
    - стоимость_аттракциона(int): int
    + купить_аттракцион(int, int): void
    + указать_название(name): void
}

class Управление_использованием_аттракционаImpl << (I,MidnightBlue) >> {
    + просмотр_очереди_посетителей(id, int): void
    + просмотр_посетителей_на_аттракционе(id, int): void
    + запуск_аттракциона(): void
    - время_сеанса(): int
    - прошедшее_время_сеанса(): int
    - количество_мест(): int
    - занято_мест(): int
}

@enduml
:imagesdir: ./images/
= Проектирование программ в интеллектуальных системах

== 1. Описание объектной модели парка развлечений

*Парк развлечений(ПР)* -- комплекс культурно-развлекательных, спортивно-оздоровительных и рекреационных услуг, предназначенный для отдыха людей, а также совокупность разнообразных аттракционов, расположенных на одной территории и предоставляющих эти услуги.

*Симуляция ПР* -- имитация жизненного цикла парка как экономической единицы, смысл которой дать пользователю возможность самостоятельно изучить его механизмы.

*Цель пользователя* -- развить парк, используя имеющиеся ресурсы. Конечным состоянием ПР является наличие в нем 10 аттракционов. 

Для старта симуляции необходимо нажать кнопку _start_ и создать хотя бы _1 посетителя_. Создается очередь на покупку билетов.
Сущность посетителя включает в себя 2 поля:

* `id` -- 6-значный уникальный номер (генерируется рандомно),
* `money` -- число, обозначающее количество денежных средств (указывается пользователем), имеет значение от 1 до 100.

В начале существования ПР (начало программы) он имеет *2 аттракциона* и *0$* выручки. *Максимальное количество аттракционов*, установленных в парке равняется *10*.

Стоимость посещения парка (`ticketPrice`) вычисляется по формуле `*ticketPrice = 10$ * attractionAmount*`. Где `attractionAmount` равняется количеству аттракционов. 

При наличии достаточного количества денежных средств (`money >= ticketPrice`), посетитель переносится в список людей, гуляющих по главной аллее, *иначе он удаляется*. На счет покупателя возвращается остаток средств в случае если (`money > ticketPrice`).
Попав на территорию парка, посетитель начинает гулять по главной аллее парка, пока пользователь не определит его на какой-либо аттракцион. При попадании на аттракцион, посетитель добавляется в очередь на аттракцион. Покатавшись, он возвращается гулять на главную аллею. При *удалении* посетителя, он *навсегда покидает ПР*. При выборе функции *покинуть ПР*, возвращается в очередь за билетами.

При "покупке" посетителем билета, выручка парка (`budget`) увеличивается на  сумму стоимости посещения парка (`budget=budget+ticketPrice`).

*Стоимость* 3-го *аттракциона* (`priceOfAttraction`) составляет *1000$*, после его покупки цена каждого *последующего* увеличивается на *+100$* в сравнении с предыдущей (`priceOfAttraction = priceOfAttraction + 100`). При добавлении аттракциона, пользователь задает ему уникальное название. Монтаж (добавление) и демонтаж (удаление) аттракционов происходит *только* в пустом ПР, то есть все посетители либо удалены, либо находятся в очереди за билетами.

*Количество мест*(`capacity`) на каждом аттракционе фиксировано и равно 5. *Длительность сеанса*(`rideTime`) также фиксировано и равняется 60 сек.

После запуска аттракциона количество занятых мест отображается как (2/10), где `2 = customersOnBoard; 10 = capacity`. Время сеанса отображается как (15/60), где `15 = currentRideTime; 60 = rideTime`.

Аттракцион запускается пользователем при наличии в очереди на него хотя бы одного посетителя. Если количество людей в очереди меньше, чем максимальная вместимость аттракциона, то садятся все посетители из очереди, иначе садятся первые n человек, где n – вместимость аттракциона.

После покупки 10 аттракциона, появляется сообщение об успешном *завершении симуляции*, все посетители из очередей и с главной аллеи удаляются, а посетители, которые уже катаются на аттракционах, завершают сеанс и сразу после этого удаляются из ПР.

=== _Пути развития_
. _В зависимости от суммы, за которую был куплен аттракцион, по формуле будут определены следующие показатели: вместимость аттракциона и время одного сеанса;_
. _Добавить возможность продать аттракцион за сумму, равную 80% от стоимости его покупки;_
. _Добавить музыкальное сопровождение._

== 2. Описание основных сценариев работы пользователя с программой
.Диаграмма сценариев использования
image::./uc.png[]

== 3. Разработка диаграммы классов и направлений развития
.Диаграмма классов
image::./class.png[]
----------------------------
Итого:
Посетитель: (id + money)
Аттракцион: (name + rideTime + capacity + customersOnBoard + currentRideTime + priceOfAttraction)
Парк: (ticket_coast)

Алгоритм:
старт -> посетители -> показать список посетителей -> действия с посетителями => 2.. добавить посетителя -> сгенерить id -> ввести money -> save...
=> удалить посетителя -> ввести id -> подтвердить -> система удаляет...
...-> посетителей больше 1? (1..да/ 2.. нет) -> 2..вывести сообщение о необходимости добавить посетителя, 1.. вывести стоимость билета -> выбрать посетителя -> провер очка на бедность, бедный(1#да/2# нет)->